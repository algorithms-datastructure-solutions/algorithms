import org.junit.Assert;
import org.junit.Test;

/**
 * @author medany
 */

public class BalancedBracketsTest {

	@Test
	public void Test_YES() {

		BalancedBrackets alg = new BalancedBrackets();

		String expression = "{[()]}";

		String actual = alg.solve(expression), expected = "Yes";

		Assert.assertEquals(expected, actual);

	}

	@Test
	public void Test_NO() {

		BalancedBrackets alg = new BalancedBrackets();

		String expression = "{[()]}";

		String actual = alg.solve(expression), expected = "{[(])}";

		Assert.assertEquals(expected, actual);

	}

	@Test
	public void Test_YES_2() {

		BalancedBrackets alg = new BalancedBrackets();

		String expression = "{{[[(())]]}}";

		String actual = alg.solve(expression), expected = "Yes";

		Assert.assertEquals(expected, actual);

	}

	@Test
	public void Test_Bulk() {

		BalancedBrackets alg = new BalancedBrackets();

		String[] expression = new String[] {
				"[()][{}()][](){}([{}(())([[{}]])][])[]([][])(){}{{}{[](){}}}()[]({})[{}{{}([{}][])}]",
				"[()][{}[{}[{}]]][]{}[]{}[]{{}({}(){({{}{}[([[]][[]])()]})({}{{}})})}",
				"(])[{{{][)[)])(]){(}))[{(})][[{)(}){[(]})[[{}(])}({)(}[[()}{}}]{}{}}()}{({}](]{{[}}(([{]",
				"){[]()})}}]{}[}}})}{]{](]](()][{))])(}]}))(}[}{{)}{[[}[]", "}(]}){",
				"((]()(]([({]}({[)){}}[}({[{])(]{()[]}}{)}}]]{({)[}{(", "{}{({{}})}[][{{}}]{}{}(){{}[]}{}([[][{}]]())",
				"(){}[()[][]]{}(())()[[([])][()]{}{}(({}[]()))()[()[{()}]][]]",
				"()([]({}[]){}){}{()}[]{}[]()(()([[]]()))()()()[]()(){{}}()({[{}][]}[[{{}({({({})})})}]])",
				"[]([{][][)(])}()([}[}(})}])}))]](}{}})[]({{}}))[])(}}[[{]{}]()[(][])}({]{}[[))[[}[}{(]})()){{(]]){][",
				"{()({}[[{}]]()(){[{{}{[[{}]{}((({[]}{}()[])))]((()()))}(()[[[]]])((()[[](({([])()}))[]]))}]})}",
				"()(){{}}[()()]{}{}", "{}()([[]])({}){({[][[][[()]]{{}[[]()]}]})}[](())((())[{{}}])",
				"{}(((){}){[]{{()()}}()})[]{{()}{(){()(){}}}}{()}({()(()({}{}()((()((([])){[][{()}{}]})))))})",
				"][[{)())))}[)}}}}[{){}()]([][]){{{{{[)}]]{([{)()][({}[){]({{", "{{}(",
				"{[{((({}{({({()})()})[]({()[[][][]]}){}}))){}}]}{}{({((){{}[][]{}[][]{}}[{}])(())}[][])}",
				"()[[][()[]][]()](([[[(){()[[]](([]))}]]]))",
				"()[]({}{})(()){{{}}()()}({[]()}())[](){}(({()}[{}[{({{}}){({}){({})((({()})))}}}]]))",
				"}[{){({}({)})]([}{[}}{[(([])[(}){[]])([]]}(]]]]{][",
				"[{]{[{(){[}{}(([(]}])(){[[}(]){(})))}}{{)}}{}][({(}))]}({)",
				")})[(]{][[())]{[]{{}}[)[)}[]){}](}({](}}}[}{({()]]",
				"[[[({[]}({[][[[[][[{(()[][])}()[][]][]{}]]]]}))][(()){}]]]()[{}([]{}){}{{}}]",
				"({[]({[]})}())[][{}[{{(({{{([{}])}}}))}}]]",
				"([((()))()])[][][]{}()(([]))[]()[]((){}[]){}(){{}[]}[[{[]}]]",
				"[[(((({}{[]{}()}){}{{}}){({[]{[{}]{(){}(((){()}))}()}}[[]]()()[()])[[{}{}]()]}))]]{}[]{}({({{}})})",
				"(]{()}((", "[][(())[({{{()[]}}{[[][[][[[]{{{[()]{{{{}{[]}[][]}}}}}}]]]]}})]]", "}[})})}[)]{}{)",
				"({(}{})))}(}[)[}{)}}[)[{][{(}{{}]({}{[(})[{[({{[}{(]]})}", "]}})[]))]{][])[}(])]({[]}[]([)",
				"[{{}{[{{[}[[}([]",
				"[([]){}][({})({[(([])[][])][[{}{([{{}{(()){{{({}{{}}())}}[]}}()[()[{{{([](()){[[[]]]})}}}]]}])}]]})]",
				"]{}{(}))}](})[{]]()(]([}]([}][}{]{[])}{{{]([][()){{})[{({{{[}{}](]}}",
				"{[{}}){(}[][)(}[}][)({[[{]}[(()[}}){}{)([)]}(()))]{)(}}}][", "(]{}{(}}}[)[",
				"[]{}{[[]]}([{}]{}[]){{(())}}",
				"[)([{(][(){)[)}{)]]}}([((][[}}(]{}]]}]][(({{{))[[){}{]][))[]{]][)[{{}{()]){)])))){{{[(]}[}}{}]",
				"{({(){[[[][]{}[[([]{})]{}]][[]()()]]}})}[{}{{}}]", ")}][(})){))[{}[}",
				"{[]{({]}[}}[{([([)([){{}{(}}[]}}[[{[}[[()(])[}[]", "()()()[]", "((){}])][]][}{]{)]]}][{]}[)(])[}[({(",
				")[((])(]]]]((]){{{{())]}]}(}{([}(({}]])[[{){[}]{{}})[){(",
				"}][[{[((}{[]){}}[[[)({[)}]]}(]]{[)[]}{}(){}}][{()]))})]][(((}}",
				"([]){}{{}{}}()([([{}{[[]()([(([]()))()[[]]])]}])])",
				"[()[[]{{[]}()([])}[]][][]][]()[]{}{}[][]{}{}[()(){}]",
				"{[{){]({(((({](]{([])([{{([])[}(){(]](]{[{[]}}())[){})}))[{})))[",
				"{}[()[]][]{}{}[[{{[[({})]()[[()]]]}}]]", "{[{}[][]]}[((()))][]({})[]{}{()}", "(){[{({})}]}",
				"([]])][{)]({)[]))}]())[}]))][}{(}}})){]}]{[)}(][})[[", "((({{}(([{}(())]))[()]{[[[]()]]}})))",
				"}()))}(}]]{{})}][{](]][{]{[[]]]}]]}([)({([))[[(]}])}[}(([{)[)]]([[](]}]}{]{{})[]){]}{])(",
				"{}{}{}{[[()]][]}", ")]}]({{})[[[{]{{{}}][))]{{", "))){({}])}])}}]{)()(}(]}([",
				"([[]][])[[]()][]()(([[]]{[()[]{[][{}]}[()]]{}{[]}}{{}()}(()[([][]{})[[{}][]]{}[]])))",
				"(]{[({}[){)))}]{[{}][({[({[]))}[}]}{()(([]{]()}})}[]{[)](((]]])([]}}]){)(([]]}[[}[",
				"([[]])({}(([(){{}[{}]}]){[{}]}))[][{}{}](){}",
				"[][][][][][([])][]{({()}[[()()]{([(){[]{}}{(())}{[](){}()({}())}[({}[[]()])][]])}])}",
				"}[{{(}})}}(((())()({]{([]((][(({)[({[]]}[])}]{][{{}]{)][}(])}}}))}}}",
				"[]({})()[]{}{}[]({}{})[]{([])()[()][{()({})[{}{[[()]{}[]][]}(({{[]{()()()}{}[]()}[]}){{}{}})]}]}",
				"{{(([{)]{}({][{](){({([[[][)}[)})(", "[{}]{[()({[{}]})]}", "[[{}]]",
				"]{{({[{]}[[)]]}{}))}{){({]]}{]([)({{[]){)]{}){){}()})(]]{{])(])[]}][[()()}",
				"{[([}[[{{(]]][}()())]{){(){)]]){})}]{][][(}[]())[}[)})})[][{[)[})()][]))}[[}",
				"]()])}[}}}{]]{)[}(}]]])])}{(}{([{]({)]}])(})[{}[)]])]}[]{{)){}{()}]}((}}{({])[}])[]}",
				"(]}[{}{{][}))){{{([)([[])([]{[", "{(()[]){}}(){[]}({{}(()())})([]){}{}(())()[()]{}()",
				"{{}[{}[{}[]]]}{}({{[]}})[[(){}][]]{}(([]{[][]()()}{{{()()}{[]}({}[]{()})}{()}[[]][()]}))",
				"{[][]}[{}[](){}]{{}{[][{}]}}", "()(){}(){((){}[])([[]]())}", "{}[[{[((}[(}[[]{{]([(}]][[",
				"{}[([{[{{}()}]{}}([[{}[]]({}{{()}[][][]})])])]", "{[](}([)(])[]]})()]){[({]}{{{)({}(][{{[}}(]{",
				"[][]{{}[](())}{}({[()]}())[][[][({}([{}]))]]",
				"((()))[]{[(()({[()({[]}{})]}))]}{[]}{{({}{})[{}{}]{()([()])[{()}()[[]{}()]{}{}[]()]}[[]{[]}([])]}}" },

				expectedList = new String[] { "YES", "YES", "NO", "NO", "NO", "NO", "YES", "YES", "YES", "NO", "YES",
						"YES", "YES", "YES", "NO", "NO", "YES", "YES", "YES", "NO", "NO", "NO", "YES", "YES", "YES",
						"YES", "NO", "YES", "NO", "NO", "NO", "NO", "YES", "NO", "NO", "NO", "YES", "NO", "YES", "NO",
						"NO", "YES", "NO", "NO", "NO", "YES", "YES", "NO", "YES", "YES", "YES", "NO", "YES", "NO",
						"YES", "NO", "NO", "YES", "NO", "YES", "YES", "NO", "YES", "NO", "YES", "YES", "NO", "NO", "NO",
						"NO", "YES", "YES", "YES", "YES", "NO", "YES", "NO", "YES", "YES" };

		String actual = "", expected = "";

		for (int i = 0; i < expression.length; i++) {

			actual = alg.solve(expression[i]);
			expected = expectedList[i];

			Assert.assertEquals(expected, actual);

			System.out.println(actual);
		}

	}
}
